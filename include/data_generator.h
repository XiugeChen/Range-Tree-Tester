//
// Created by Xiuge Chen on 5/21/20.
//

#ifndef RANGETREE_DATA_GENERATOR_H
#define RANGETREE_DATA_GENERATOR_H

#include <random>
#include <array>

#include "types.h"

namespace Xiuge::RangeTree {

/**
 * Data generator of this experiment, will produce one of insertion, deletion or search operation
 */
class DataGenerator {
public:
    DataGenerator();

    /**
     * Set the range for all dimensions of future generated points
     * @param coord_min Smallest possible value, has to be positive
     * @param coordmax Largest possible value, has to be positive
     */
    void set_range(const uint32_t coord_min, const uint32_t coordmax);

    /**
     * generate and return a set P of n 2-dimensional points, each of which has a unique integer identifier in [1,n]
     * and is generated by generate a point between [coord_min, coord_max], where coord_min and coord_max are default as
     * 0 and 1, and could be changed via set_range.
     * @param n The number of points to be generated
     * @return A vector of points of length n
     */
    std::vector<Point> generate_point_set(const uint32_t n);

    /**
     *
     * @param range
     * @return
     */
    Query generate_a_query(const uint32_t range);

private:
    /**
     * generate and return a point uniformly at random in the 2-dimensional integer space [coord_min, coord_max]^2,
     * where coord_min and coord_max are default as 0 and 1, and could be changed via set_range.
     * @return A integral two dimensional point that is randomly drawn from [coord_min, coord_max]^2
     */
    Point generate_a_point();

    // Will be used to obtain a seed for the random number engine
    std::random_device mRd;
    // Standard mersenne_twister_engine seeded with mRd()
    std::mt19937 mGenerator;
    // Uniform distribution of points
    std::uniform_int_distribution<uint32_t> mPtDist;
};

} // namespace ::Xiuge::RangeTree

#endif //RANGETREE_DATA_GENERATOR_H
